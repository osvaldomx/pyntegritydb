name: Ejecutar Pruebas

on:
  push:
    branches: [ main, dev ]
  pull_request:
    branches: [ main ]

jobs:
  # --- TRABAJO PARA SQLITE ---
  test-sqlite:
    name: Probar en Python ${{ matrix.python-version }} con SQLite
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.12"]

    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      - name: Instalar dependencias
        run: pip install -e ".[dev]"
      - name: Ejecutar pruebas con SQLite
        run: pytest tests/test_integration.py
        env:
          DB_URI: "sqlite:///test_integration_db.sqlite"

  # --- TRABAJO PARA POSTGRESQL ---
  test-postgres:
    name: Probar en Python ${{ matrix.python-version }} con PostgreSQL
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.12"]
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: testuser
          POSTGRES_PASSWORD: testpassword
          POSTGRES_DB: testdb
        ports:
          - 5432:5432
        volumes:
          - ./tests/db_dumps/postgres_init.sql:/docker-entrypoint-initdb.d/init.sql
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
          
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      - name: Instalar dependencias
        run: |
          pip install -e ".[dev]"
          pip install psycopg2-binary
      - name: Ejecutar pruebas con PostgreSQL
        run: pytest tests/test_integration.py
        env:
          DB_URI: "postgresql://testuser:testpassword@localhost:5432/testdb"

  # --- TRABAJO PARA MYSQL ---
  test-mysql:
    name: Probar en Python ${{ matrix.python-version }} con MySQL
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.12"]

    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: testpassword
          MYSQL_DATABASE: testdb
        ports:
          - 3306:3306
        volumes:
          - ./tests/db_dumps/mysql_init.sql:/docker-entrypoint-initdb.d/init.sql
        options: >-
          --health-cmd "mysqladmin ping -h 127.0.0.1"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
          
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      - name: Instalar dependencias
        run: |
          pip install -e ".[dev]"
          pip install PyMySQL cryptography
      - name: Ejecutar pruebas con MySQL
        run: pytest tests/test_integration.py
        env:
          DB_URI: "mysql+pymysql://root:testpassword@localhost:3306/testdb"

  tests:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - uses: actions/setup-python@v5
        with:
          python-version: "3.12"
        
      - name: Instalar dependencias
        run: pip install -e ".[dev]"

      - name: Ejecutar pruebas y generar reporte de cobertura
        run: pytest --cov=pyntegritydb --cov-report=xml

      - name: Verificar que el archivo de cobertura existe
        run: ls -l
        
      - name: Subir paquete a Codecov
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOVE_TOKEN }}
          verbose: true